generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  // directUrl = env("DIRECT_URL")
  extensions = [uuid_ossp(map: "uuid-ossp"), vector]
}

model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  emailVerified DateTime?
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  avatar        String?
  roles         String[]
  nickname      String?
  accounts      Account[]
  Authenticator Authenticator[]
  sessions      Session[]
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?
  user                 User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

model Document {
  id      String                 @id @default(cuid())
  content String
  latest  DateTime               @db.Timestamptz(6)
  vector  Unsupported("vector")?
}

// 진건희 관할

model ChatRoom {
  id        Int      @id @default(autoincrement())
  important Boolean  @default(false)
  title     String
  userId    Int
  sortOrder Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Conversation {
  id                     Int        @id @default(autoincrement())
  sender                 SenderType
  message                String
  chatRoomId             Int
  previousConversationId Int
  createdAt              DateTime   @default(now())
  updatedAt              DateTime   @updatedAt
}

model Report {
  id             Int      @id @default(autoincrement())
  conversationId Int
  userId         Int
  createdAt      DateTime @default(now())
  updatedAt      DateTime
}

model Document {
  id       Int                    @id @default(autoincrement())
  content  String
  latest   DateTime               @db.Timestamptz(6)
  vector   Unsupported("vector")?
  metadata Json
}

enum SenderType {
  user
  ai
}